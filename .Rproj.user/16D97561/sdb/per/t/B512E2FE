{
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\nlibrary(reshape2)\nlibrary(cluster)\nlibrary(dplyr)\nlibrary(rCharts)\nlibrary(RColorBrewer)\nlibrary(RCurl)\n\nshinyServer(function(input, output) {\n  x <- read.csv(\"http://data.gov.au/storage/f/2013-05-12T201353/tmpZrsaL6PSA-Rates.csv\", stringsAsFactors = F)\n  crime <- dcast(x, PSA_NAME ~ LABEL, value.var = \"CURR\")\n  colnames(crime) <- tolower(colnames(crime))\n  k1 <- clara(crime[,-1], k = 4)\n  \n  pcfile <- getURL(\"https://raw.githubusercontent.com/Aileenshanhong/crime_vic/master/pc_full_lat_long.csv\")\n  suburbs <- read.csv(text = pcfile, stringsAsFactors = F)\n  rm(pcfile)\n  \n  suburbs <- filter(suburbs, State == \"VIC\") %>%\n    select(Locality, Pcode, lat = Lat, lon = Long) %>%\n    group_by(Locality) %>%\n    summarise(postcode = min(Pcode), lat = median(lat), lon = median(lon))\n  \n  crime <- mutate(crime, cluster = k1$clustering, Locality = toupper(psa_name)) %>%\n    left_join(suburbs, by = \"Locality\")\n  \n  colorset <- brewer.pal(4, \"RdYlGn\")\n  od <- c(2, 4, 3, 1)\n  colors <- data.frame(cluster = c(1:4), color = colorset[od])\n  crime <- left_join(crime, colors, by = \"cluster\")\n  crime$popup <- paste0(\"<p>Police Station: \", crime$psa_name,\n                        \"<br>Cluster: \", crime$cluster,\n                        \"<br>Total Crime: \", crime$\"05_total crime\", \"</p>\")\n  crime$id <- crime$idx <- c(0: (nrow(crime)-1))\n  crime <- crime[complete.cases(crime),]\n  \n  crimelist <- apply(crime, 1, as.list)\n  crimelist1 <- lapply(crimelist, function(row1){\n    psa_name = row1$\"psa_name\"\n    id = as.integer(row1$id)\n    idx = as.integer(row1$idx)\n    total_crime = as.numeric(row1$\"05_total crime\")\n    cluster = as.integer(row1$\"cluster\")\n    suburb = row1$Locality\n    postcode = row1$\"Pcode\"\n    lat = as.numeric(row1$lat)\n    lon = as.numeric(row1$lon)\n    color = row1$color\n    popup = row1$popup\n    return(list(psa_name = psa_name, idx = idx, total_crime = total_crime, cluster = cluster,\n                suburb = suburb, postcode = postcode, latitude = lat, longitude = lon, lat = NULL, lng = NULL, \n                id = id, fillColor = color, popup = popup))\n  })\n  \n  crime1 <- group_by(crime[,c(2:5, 7:16)], cluster) %>%\n    summarise_each(funs(median))\n  \n  crime2 <- melt(crime1, id.vars = \"cluster\", variable.name = \"crime_type\", value.name = \"no_of_incidents\")\n  \n  output$map_container <- renderMap({\n    crime.map <- Leaflet$new()\n    crime.map$setView(c(-36.758106, 144.283042), zoom = 7)\n    crime.map$tileLayer(provider = 'Stamen.TonerLite')\n    crime.map$geoJson(toGeoJSON(crimelist1),\n                      onEachFeature = '#! function(feature, layer){\n                                   layer.bindPopup(feature.properties.popup)\n                                   } !#',\n                      pointToLayer = \"#! function(feature, latlng){\n                                 return L.circleMarker(latlng, {\n                                 radius: 5,\n                                 fillColor: feature.properties.fillColor || 'red', \n                                 color: '#000',\n                                 weight: 1,\n                                 fillOpacity: 0.8\n                                  })\n                                 } !#\" )\n    \n    #crime.map$set(width = 1600, height = 800)\n    crime.map$enablePopover(TRUE)\n    crime.map$fullScreen(TRUE)\n    crime.map\n  })\n  \n  \n  output$chart1 <- renderChart2({\n    plot1 <- rPlot(crime_type ~ no_of_incidents | cluster, data = crime2, type = \"point\", size = list(const = 2))\n    plot1$facet(rows = 2)\n    plot1$set(title = \"Median Crime Incidents in VIC\")\n    return(plot1)\n  })\n  \n  ps <- reactive({\n    x <- unique(crime$psa_name)\n    out <- as.list(x)\n    names(out) <- x\n    return(out)\n  })\n  \n  output$psa <- renderUI({\n    selectInput('ps1', 'Police Station', ps(), \"Melbourne\")\n  })\n  output$text1 <- renderText({paste(\"You have selected\", input$ps1)})\n  \n  chosen2 <- reactive({\n    chosen <- filter(crime, psa_name == input$ps1)\n    \n    out <- melt(chosen[,c(1:5, 7:15)], id.vars = \"psa_name\", variable.name = \"crime_type\", value.name = \"no_of_incidents\")\n    return(out)\n    })\n\n   \n  output$chart2 <- renderChart2({\n    \n    plot2 <- rPlot(crime_type ~ no_of_incidents, data = chosen2(), type = \"point\")\n    plot2$set(title = paste(\"Crime Incidents by Type at Police Station\", input$ps1))\n    return(plot2)\n  })\n\n})\n",
    "created" : 1419052160407.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2738569326",
    "id" : "B512E2FE",
    "lastKnownWriteTime" : 1419156510,
    "path" : "~/Downloads/crime_project/crime_vic/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}