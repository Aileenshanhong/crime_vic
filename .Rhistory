shiny::runApp()
?showOutput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
x <- read.csv("http://data.gov.au/storage/f/2013-05-12T201353/tmpZrsaL6PSA-Rates.csv", stringsAsFactors = F)
crime <- dcast(x, PSA_NAME ~ LABEL, value.var = "CURR")
colnames(crime) <- tolower(colnames(crime))
k1 <- clara(crime[,-1], k = 4)
pcfile <- getURL("https://raw.githubusercontent.com/Aileenshanhong/crime_vic/master/pc_full_lat_long.csv")
suburbs <- read.csv(text = pcfile, stringsAsFactors = F)
rm(pcfile)
suburbs <- filter(suburbs, State == "VIC") %>%
select(Locality, Pcode, lat = Lat, lon = Long) %>%
group_by(Locality) %>%
summarise(postcode = min(Pcode), lat = median(lat), lon = median(lon))
crime <- mutate(crime, cluster = k1$clustering, Locality = toupper(psa_name)) %>%
left_join(suburbs, by = "Locality")
colorset <- brewer.pal(4, "RdYlGn")
od <- c(2, 4, 3, 1)
colors <- data.frame(cluster = c(1:4), color = colorset[od])
crime <- left_join(crime, colors, by = "cluster")
crime$popup <- paste0("<p>Police Station: ", crime$psa_name,
"<br>Cluster: ", crime$cluster,
"<br>Total Crime: ", crime$"05_total crime", "</p>")
crime$id <- crime$idx <- c(0: (nrow(crime)-1))
crime <- crime[complete.cases(crime),]
plot1 <- rPlot(crime_type ~ no_of_incidents | cluster, data = crime2, type = "point", size = list(const = 2))
crime1 <- group_by(crime[,c(2:5, 7:16)], cluster) %>%
summarise_each(funs(median))
crime2 <- melt(crime1, id.vars = "cluster", variable.name = "crime_type", value.name = "no_of_incidents")
plot1 <- rPlot(crime_type ~ no_of_incidents | cluster, data = crime2, type = "point", size = list(const = 2))
plot1$facet(rows = 2)
plot1$set(title = "Median Crime Incidents in VIC")
plot1
rm(list = ls())
gc(reset = T)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
x <- read.csv("http://data.gov.au/storage/f/2013-05-12T201353/tmpZrsaL6PSA-Rates.csv", stringsAsFactors = F)
crime <- dcast(x, PSA_NAME ~ LABEL, value.var = "CURR")
colnames(crime) <- tolower(colnames(crime))
k1 <- clara(crime[,-1], k = 4)
pcfile <- getURL("https://raw.githubusercontent.com/Aileenshanhong/crime_vic/master/pc_full_lat_long.csv")
suburbs <- read.csv(text = pcfile, stringsAsFactors = F)
rm(pcfile)
suburbs <- filter(suburbs, State == "VIC") %>%
select(Locality, Pcode, lat = Lat, lon = Long) %>%
group_by(Locality) %>%
summarise(postcode = min(Pcode), lat = median(lat), lon = median(lon))
crime <- mutate(crime, cluster = k1$clustering, Locality = toupper(psa_name)) %>%
left_join(suburbs, by = "Locality")
colorset <- brewer.pal(4, "RdYlGn")
od <- c(2, 4, 3, 1)
colors <- data.frame(cluster = c(1:4), color = colorset[od])
crime <- left_join(crime, colors, by = "cluster")
crime$popup <- paste0("<p>Police Station: ", crime$psa_name,
"<br>Cluster: ", crime$cluster,
"<br>Total Crime: ", crime$"05_total crime", "</p>")
crime$id <- crime$idx <- c(0: (nrow(crime)-1))
crime <- crime[complete.cases(crime),]
crime[1,]
crime1 <- group_by(crime[,c(2:5, 7:16)], cluster) %>%
summarise_each(funs(median))
crime2 <- melt(crime1, id.vars = "cluster", variable.name = "crime_type", value.name = "no_of_incidents")
crime2[1,]
chosen2 <- melt(chosen, id.vars = "psa_name", variable.name = "crime_type", value.name = "no_of_incidents")
chosen <- filter(crime, psa_name = ps1)
chosen2 <- melt(chosen, id.vars = "psa_name", variable.name = "crime_type", value.name = "no_of_incidents")
chosen <- filter(crime, psa_name = "Melbourne")
chosen <- filter(crime, psa_name == "Melbourne")
chosen2 <- melt(chosen, id.vars = "psa_name", variable.name = "crime_type", value.name = "no_of_incidents")
chosen
chosen2
chosen2 <- melt(chosen[,c(1:16)], id.vars = "psa_name", variable.name = "crime_type", value.name = "no_of_incidents")
chosen2
chosen2 <- melt(chosen[,c(1:15)], id.vars = "psa_name", variable.name = "crime_type", value.name = "no_of_incidents")
chosen2
rm(list = ls())
gc(reset = T)
shiny::runApp()
shiny::runApp()
?rPlot
shiny::runApp()
x <- read.csv("http://data.gov.au/storage/f/2013-05-12T201353/tmpZrsaL6PSA-Rates.csv", stringsAsFactors = F)
crime <- dcast(x, PSA_NAME ~ LABEL, value.var = "CURR")
colnames(crime) <- tolower(colnames(crime))
k1 <- clara(crime[,-1], k = 4)
pcfile <- getURL("https://raw.githubusercontent.com/Aileenshanhong/crime_vic/master/pc_full_lat_long.csv")
suburbs <- read.csv(text = pcfile, stringsAsFactors = F)
rm(pcfile)
suburbs <- filter(suburbs, State == "VIC") %>%
select(Locality, Pcode, lat = Lat, lon = Long) %>%
group_by(Locality) %>%
summarise(postcode = min(Pcode), lat = median(lat), lon = median(lon))
crime <- mutate(crime, cluster = k1$clustering, Locality = toupper(psa_name)) %>%
left_join(suburbs, by = "Locality")
colorset <- brewer.pal(4, "RdYlGn")
od <- c(2, 4, 3, 1)
colors <- data.frame(cluster = c(1:4), color = colorset[od])
crime <- left_join(crime, colors, by = "cluster")
crime$popup <- paste0("<p>Police Station: ", crime$psa_name,
"<br>Cluster: ", crime$cluster,
"<br>Total Crime: ", crime$"05_total crime", "</p>")
crime$id <- crime$idx <- c(0: (nrow(crime)-1))
crime <- crime[complete.cases(crime),]
chosen <- filter(crime, psa_name == input$ps1)
chosen <- filter(crime, psa_name == "Melbourne")
chosen2 <- melt(chosen[,c(1:15)], id.vars = "psa_name", variable.name = "crime_type", value.name = "no_of_incidents")
plot2 <- nPlot(crime_type ~ no_of_incidents, data = chosen2, type = "multiBarChart", size = list(const = 2))
plot2$set(title = paste("Crime Incidents by Type at Police Station", input$ps1))
plot2
plot2 <- rPlot(crime_type ~ no_of_incidents, data = chosen2, type = "bar", size = list(const = 2))
plot2
plot2 <- rPlot(crime_type ~ no_of_incidents, data = chosen2, type = "bar")
plot2
plot2 <- rPlot(crime_type ~ no_of_incidents, data = chosen2, type = "point")
plot2
n1 <- nPlot(~ no_of_incidents, data = chosen2,
type = 'discreteBarChart')
n1$show("iframesrc", cdn = TRUE)
n1
n1 <- nPlot(crime_type ~ no_of_incidents, data = chosen2,
type = 'discreteBarChart')
n1
plot2 <- rPlot(crime_type ~ no_of_incidents, data = chosen2, type = "bar")
plot2
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rm(list = ls())
gc(reset = T)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rm(list = ls())
gc(reset = T)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
data(mtcars)
colnames(mtcars)
shiny::runApp()
shiny::runApp()
rm(list = ls())
gc(reset = T)
shiny::runApp()
shiny::runApp()
shiny::runApp()
as.character(list("qw"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?observe
?isolate
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rm(list = ls())
gc(reset = T)
install.packages("googleVis")
shiny::runApp()
shiny::runApp()
install.packages("ggvis")
shiny::runApp()
shiny::runApp()
shiny::runApp()
?bind_shiny
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?median
rm(list = ls())
gc(reset = T)
deployApp()
require(devtools)
deployApp()
require(shinyApps)
require(shinyApp)
require(shinyapps)
deployApp()
devtools::install_github('rstudio/shinyapps')
require(shinyapps)
deployApp()
install.packages("BH")
deployApp()
deployApp()
library(slidify)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
devtools::install_github('slidify', 'ramnathv')
devtools::install_github('slidifyLibraries', 'ramnathv')
library(slidify)
library(knitr)
library(slidify)
author("A. L.")
library(devtools)
author("A. L.")
---
publish(user = "Aileenshanhong", repo = "crime_vic")
publish(user = Aileenshanhong, repo = crime_vic)
publish(user = "Aileenshanhong", repo = "crime_vic")
?lm
?dgamma
?mean
?colSums
sessionInfo()
